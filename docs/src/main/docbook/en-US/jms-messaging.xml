<?xml version="1.0" encoding="UTF-8"?>
<!--
  JBoss, Home of Professional Open Source
  Copyright 2011, Red Hat, Inc. and/or its affiliates, and individual
  contributors by the @authors tag. See the copyright.txt in the
  distribution for a full listing of individual contributors.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="messaging-api">
	<title>Messaging API</title>
	<para>
		The Seam JMS Messaging API is a higher level abstraction of the JMS API to provide a number of convenient methods for creating consumers, producers, etc.
	</para>

	<section id="messaging-builder-apis">
		<title>QueueBuilder and TopicBuilder</title>
		<para>
			The <code>QueueBuilder</code> and <code>TopicBuilder</code> interfaces are meant to ease the integration of JMS while still sticking close to the base APIs.
			Within the single class you can work with both listeners and send messages.  
			References to these classes can be injected or retrieved from a MessageManager instance (seen below).
		</para>
		<para>
			Some example usages.
		</para>
                <programlisting role="JAVA"><![CDATA[@RequestScoped
@Named
public class FormBean {
  private String formData;
  @Inject QueueBuilder queueBuilder;
  @Inject TopicBuilder topicBuilder;

  public void sendFormDataToQueue() {
      queueBuilder.destination("jms/SomeQueue").sendString(formData);
  }

  public void sendFormDataToTopic() {
      topicBuilder.destination("jms/SomeTopic").sendString(formData);
  }
}]]></programlisting>
	</section>

	<section id="messaging-api-jms-local">
		<title>Message Manager</title>
		<para>
                    The <code>MessageManager</code> interface (<code>org.jboss.seam.jms.MessageManager</code>) is the main consolidated API for Seam JMS.
                    It provides almost all of the background functionality for Seam JMS's features (Observer Interfaces, Routing API).
                    The default implementation works against <code>javax.naming.Context</code> assuming running within the same local application server.
		</para>
                <programlisting role="JAVA"><![CDATA[public interface MessageManager {
	public ObjectMessage createObjectMessage(Object object);
	public TextMessage createTextMessage(String string);
	public MapMessage createMapMessage(Map<Object,Object> map);
	public BytesMessage createBytesMessage(byte[] bytes);
	public void sendMessage(Message message, String... destinations);
	public void sendObjectToDestinations(Object object, String... destinations);
	public void sendTextToDestinations(String string, String... destinations);
	public void sendMapToDestinations(Map map, String... destinations);
	public void sendBytesToDestinations(byte[] bytes, String... destinations);
	public void sendMessage(Message message, Destination... destinations);
	public void sendObjectToDestinations(Object object, Destination... destinations);
	public void sendTextToDestinations(String string, Destination... destinations);
	public void sendMapToDestinations(Map map, Destination... destinations);
	public void sendBytesToDestinations(byte[] bytes, Destination... destinations);
	public Session getSession();
	public MessageProducer createMessageProducer(String destination);
	public TopicPublisher createTopicPublisher(String destination);
	public QueueSender createQueueSender(String destination);
	public MessageConsumer createMessageConsumer(String destination, MessageListener... listeners);
	public MessageConsumer createMessageConsumer(Destination destination, MessageListener... listeners);
	public TopicSubscriber createTopicSubscriber(String destination, MessageListener... listeners);
	public QueueReceiver createQueueReceiver(String destination, MessageListener... listeners);
	public TopicBuilder createTopicBuilder();
	public QueueBuilder createQueueBuilder();
}]]></programlisting>
                <para>
                    The interface above defines a full set of capabilities for creating
                    and sending messages.  In addition, we expose methods for creating
                    producers (and A destination specific publisher and sender) as well as
                    consumers (and A destination specific subscriber and receiver).
                    In addition, if injected within a session scoped object, or similar,
                    you can define a durable subscriber and unsubscriber for that subscriber.
                    Below is an example.
                </para>
                <para>
                    The durable subscriber pattern works very well for session based
                    message management.  If you want to define a durable subscriber per
                    user session, this is the easiest way to do it.
                </para>
                <programlisting role="JAVA"><![CDATA[@SessionScoped
                public class UserSession {
                    @Inject MessageManager messageManager;
                    @Inject MySessionJMSListener listener;
                    private String clientId;
                    @PostConstruct
                    public void registerListener() {
                        clientId = UUID.randomUUID().toString();
                        messageManager.createDurableSubscriber("jms/UserTopic",clientId,listener);
                    }
                    @PreDestroy
                    public void shutdownListener() {
                        messageManager.unsubscribe(clientId);
                    }
                }
                ]]></programlisting>
	</section>
        <section id="durable-messaging-api">
            <title>Durable Messaging Capabilities</title>
            <para>
                Seam JMS provides a Messaging API around the JMS Durable Topic Subscriber concept.
                In order to use it within your code, you need to inject a DurableMessageManager.
            </para>
            <programlisting role="JAVA"><![CDATA[
            @Inject @Durable DurableMessageManager durableMsgManager;
            ]]></programlisting>
            <para>
                This implementation of <code>MessageManager</code> provides additional methods to
                first login to the connection with a <code>ClientID</code>, additional methods to create
                subscribers and an unsubscribe that can be called to unsubscribe a listener.
            </para>
            <programlisting role="JAVA"><![CDATA[
            public void login(String clientId);
            public TopicSubscriber createDurableSubscriber(String topic, String id, MessageListener... listeners);
            public TopicSubscriber createDurableSubscriber(Topic topic, String id, MessageListener... listeners);
            public void unsubscribe(String id);
            ]]></programlisting>
            <tip>
              <para>
                From a design pattern standpoint, it makes sense to create an <code>ApplicationScoped</code> object that
                all subscribers are created from, injecting a <code>DurableMessageManager</code> for use across the application,
                producing <code>SessionScoped</code> sessions for use by clients.
              </para>
            </tip>
        </section>
        <section id="messaging-api-listener">
            <title>MessageListeners versus Message Driven Beans</title>
            <para>
                One of the difficult choices we had to make was support for Message-Driven Beans.
                MDBs are a little complicated in CDI as they are not managed within the CDI life cycle.
                This makes integration with them a bit cumbersome.  We wouldn't be able to work with a
                JMS Session in these cases, as an example.  As a result, Seam JMS only supports
                defining instances of <literal>javax.jms.MessageListener</literal>.  To support this, we have
                created a partial implementation - <literal>org.jboss.seam.jms.AbstractMessageListener</literal>.
                This special MessageListener is designed for bridging the external context of a JMS
                Message into the application you are working with.  We do this by tweaking classloaders.
            </para>
            <para>
                The best way to work with MessageListeners is to simply instantiate your own based on
                our base implementation.
            </para>
            <programlisting role="JAVA">
                //where cl is the class loader, and beanManager is the BeanManager
                MessageListener ml = new SessionListener(beanManager,cl,this);
                messageManager.createTopicSubscriber("/jms/myTopic", ml);
            </programlisting>
            <para>
                Or you may define your own subclass that makes specific invocations to the parent.  Here is an
                example of that:
            </para>
            <programlisting role="JAVA"><![CDATA[@SessionScoped
                public class SessionListener extends AbstractMessageListener {
                    private MySessionObject mso;
                    public SessionListener(BeanManager beanManager, ClassLoader classLoader,
                        MySessionObject mso){
                        super(beanManager,classLoader);
                        this.mso = mso;
                    }

                    @Override
                    protected void handlMessage(Message msg) throws JMSException {
                        //your business logic goes here
                    }
                }
                ]]></programlisting>
        </section>
</chapter>
