<?xml version="1.0" encoding="UTF-8"?>
<!--
  JBoss, Home of Professional Open Source
  Copyright 2011, Red Hat, Inc. and/or its affiliates, and individual
  contributors by the @authors tag. See the copyright.txt in the
  distribution for a full listing of individual contributors.
 
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="routing">
    <title>Bridging the Gap</title>

    <para>
      This chapter is designed to detail how to configure the CDI to JMS event bridge.  Routing has two sides, sending
      of events to JMS destinations and translating received messages from JMS destinations back into CDI events.  The
      sections of this chapter describe how to achieve both.
    </para>
   
    <section id="routing.bridge">
        <title>Event Routing</title>
      
        <para>
         Simply sending or receiving a message over JMS involves a few players:  Connection, Session, Destination, and
         the message itself.  Surely you can inject all required resources and perform the routing yourself but that 
         takes away from the whole reason you're using a tool in the first place!
        </para>
      
        <section id="routing.bridge.route">
            <title>Routes</title>
         
            <para>
            Routing CDI events to and from JMS can be configured by defining a
                <literal>Route</literal>. As you would
            normally create an observer method for an event you can define a route to control which events get 
            forwarded to what destination.  Or conversely, what message types sent to which destinations generate CDI 
            events.

                <programlisting role="Java">public interface Route {
  public &lt;D extends Destination&gt; Route connectTo(Class&lt;D&gt; d, D destination);
  public Route addQualifiers(Annotation... qualifiers);

  ...
}
                </programlisting>
            </para>

            <para>
            Routes allows for simple mapping of event types, complete with qualifiers, to a set of destinations.  They 
            can be configured by adding qualifiers and providing destinations they should interact with and are created
            from a
                <literal>RouteManager</literal>. Here's a simple route that forwards CDI events on to a queue:
            
                <programlisting role="Java">
@EventRouting public Route registerMyRoute(RouteManager routeManager)
{
   Queue myQueue = lookupQueue("/jms/MyQueue");
   return routeManager.createRoute(RouteType.EGRESS, MyEvent.class).connectTo(Queue.class, myQueue);
}
                </programlisting>
            </para>
            <para>
                A <code>RouteManager</code> is a factory object for creating new Routes.  An instance of it is injected
                into every <literal>@EventRouting</literal> method.  Classes with methods that are decorated with <code>EventRouting</code>
                must meet a few criteria items:

                <itemizedlist>
                    <listitem><para>A default, no arg constructor.</para></listitem>
                    <listitem><para>Be a non bean (no dependencies on injection)</para></listitem>
                    <listitem><para>Return either <literal>Route</literal> instances or <literal>Collection&lt;Route&gt;</literal> instances.</para></listitem>
                </itemizedlist>

                These requirements exist because of when the generation of <literal>Route</literal>s must happen.
                There are no CDI beans active within the context.  A class identified for routing will automatically
                be veto'd from the context.
            </para> 

            <para>
            Routes are registered by returning them from a non-bean method annotated with
                <literal>@EventRouting</literal>:
            
                <programlisting role="Java">
@EventRouting public Route myConfig()
{
   return bridge.createRoute(RouteType.INGRESS, MyEvent.class).addDestinationJndiName("/jms/MyTopic");
}
                </programlisting>
            </para>
        </section>
    </section>

    <section id="routing.egress">
        <title>Routing CDI Events to JMS</title>

        <para>
         Forwarding CDI events to JMS is configured by creating an egress route.  Let's say you wanted to forward all
            <literal>MyEvent</literal> events with
            <literal>@Bridged</literal> qualifier to the queue
            <literal>jms/EventQueue</literal>.  Simple,  register a route:
         
            <programlisting role="Java">
AnnotationLiteral&lt;Bridged&gt; BRIDGED = new AnnotationLiteral&lt;Bridged&gt;() {};
@EventRouting public Route registerMyEventRoute(RouteManager routeManager)
{
   return routeManager.createRoute(RouteType.EGRESS, MyEvent.class).addQualifiers(BRIDGED).addDestinationJndiName("/jms/EventQueue");
}
            </programlisting>
        </para>

        <section id="routing.egress.usage">
      
            <title>Usage</title>
            <para>
            With your routing defined you can simply fire events that match the route's payload type and
            qualifiers and these events will be forwarded over JMS as object messages.  A special note,
            we have added the qualifier
                <code>@Routing(RouteType.EGRESS)</code>.  This is necessary
            to avoid circular routings.
            
                <programlisting role="Java">@Inject @Bridged @Routing(RouteType.EGRESS) Event&lt;MyEvent&gt; event;
...
event.fire(myEvent);
                </programlisting>
            </para>
        </section>
    </section>

    <section id="routing.ingress">
        <title>CDI Events from JMS Messages</title>

        <para>
         Similar to egress routes, ingress routes are defined the same way. In this case, they listen for messages on the specified destination(s) and fire events.
         All of the data will be type safe, assuming you have defined your routes correctly.
        </para>

        <para>
          Similar to the above example, this creates ingress routes from the Queue jms/EventQueue and fires events based on the MyEvent
          objects that are carried over the wire.
        </para>

        <programlisting role="Java">
AnnotationLiteral&lt;Bridged&gt; BRIDGED = new AnnotationLiteral&lt;Bridged&gt;() {};
@EventRouting public Route registerMyEventRoute(RouteManager routeManager)
{
   return routeManager.createRoute(RouteType.INGRESS, MyEvent.class).addQualifiers(BRIDGED).addDestinationJndiName("/jms/EventQueue");
}
        </programlisting>
        <section id="routing.ingress.usage">
            <title>Usage</title>
            <para>
             Once you define an ingress route, you handle it using an observer method.  We use the same payload type
             and qualifiers, however we need to add the same qualifier, but for ingress
                <code>@Routing(RouteType.INGRESS)</code>
            </para>
            <programlisting role="Java">
          public void handleInboundMyEvent(@Observes @Routing(RouteType.INGRESS) MyEvent e) {
            ....
          }
            </programlisting>
        </section>
    </section>
</chapter>
   
